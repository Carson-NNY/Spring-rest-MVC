logging.level.guru.springframework=debug
logging.level.org.zalando.logbook=trace
spring.flyway.enabled=false

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000


#new feature: virtual threads after java 21 and spring 6, and there is no downside!!
# without virtual threads - 617 MB memory
# with virtual threads - 454 MB memory
# thus, it is useful if you are in a microservice environment and you are deploying it into Kubernetes cluster
# you can save roughly 200 MB memory per instance. (useful if you have many instances running)
spring.threads.virtual.enabled=true

# actuator integration with Kubernetes
management.endpoint.health.probes.enabled=true
management.health.readinessstate.enabled=true
management.health.livenessstate.enabled=true

spring.cache.cache-names=beerCache, beerListCache


# when to use it to generate script: when projects get complex,  you ?????h2, ????mysql, ???????????data initialization sql script, ????mysql database
# when Hibernate starter is initialized, it will see these properties and do reflection upon the entities we have defined and then created a database script
# ??????MySql, best practice to create a script to create the database and work with it, you don't want Hibernate to do it
# run applicaiton??? comment?, ????????drop and create, ????? V1__init-mysql-database.sql??
## ??run????????, ?? ?main directory ??-> reload from disk????
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=drop-and-create
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.drop-target=V1__init-mysql-database.sql
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=V1__init-mysql-database.sql